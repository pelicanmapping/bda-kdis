#include "./DIS_Logger_Record.h"

using namespace std;
using namespace KDIS;
using namespace UTILS;

//////////////////////////////////////////////////////////////////////////
// protected:
//////////////////////////////////////////////////////////////////////////

void DIS_Logger_Record::writeToFile( const KString & S ) throw( KException )
{
    if( m_File.is_open() == false )throw KException( __FUNCTION__, FILE_NOT_OPEN );

    m_File << S << endl;
}

//////////////////////////////////////////////////////////////////////////

void DIS_Logger_Record::writeToBuffer( const KString & S )
{
    m_vsLog.push_back( S );
}

//////////////////////////////////////////////////////////////////////////
// public:
//////////////////////////////////////////////////////////////////////////

DIS_Logger_Record::DIS_Logger_Record( const KString & FileName, KBOOL WriteToFile ) :
    m_bWriteToFile( WriteToFile )
{
    m_File.open( FileName.c_str(), ios::out );
}

//////////////////////////////////////////////////////////////////////////

DIS_Logger_Record::~DIS_Logger_Record( void )
{
    m_vsLog.clear();
}

//////////////////////////////////////////////////////////////////////////

void DIS_Logger_Record::Save() throw( KException )
{
    vector<KString>::const_iterator citr = m_vsLog.begin();
    vector<KString>::const_iterator citrEnd = m_vsLog.end();

    for( ; citr != citrEnd; ++citr )
    {
        writeToFile( *citr );
    }

    Clear();
}

//////////////////////////////////////////////////////////////////////////

void DIS_Logger_Record::Clear()
{
    m_vsLog.clear();
}

//////////////////////////////////////////////////////////////////////////

KUINT16 DIS_Logger_Record::GetBufferSize() const
{
    return m_vsLog.size();
}

//////////////////////////////////////////////////////////////////////////
